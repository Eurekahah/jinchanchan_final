#include"GameWorkFlow.h"


GameWorkFlow::GameWorkFlow()
{

	
}

GameWorkFlow::~GameWorkFlow()
{

}


void GameWorkFlow::Menu()//开始游戏
{
	/*放置开始游戏界面*/

}


void GameWorkFlow::gameInit()//单人游戏初始化
{
	/*基本元素和数据初始化*/

	/*1.初始化地图界面*/

	/*2.棋盘初始化：无内容*/

	/*3.hero初始化*/
	/*3.1.场上hero初始化：建立hero专门的layer*/

	/*3.2.待战区hero初始化：无内容*/

	/*4.商店初始化*/
	/*4.1金币初始化，给20个金币*/

	/*4.2商店内hero初始化，随机给出5个英雄*/

	/*5.玩家初始化*/
	/*5.1玩家本体初始化：在棋盘上左下角呈现一个Player实例*/

	/*5.2玩家等级初始化：整个界面左下角呈现一个等级图样，0级*/

	/*6.装备区初始化：开局直接随机给俩装备*/

	/*7.计时条初始化：暂定20s*/

	/*8.监听器权限：*/
	/*8.1.商店始终可购买及刷新*/

	/*8.2.玩家等级始终可升级*/

}

void GameWorkFlow::interval()//游戏回合间隙
{
	/*1.等待到所有对局回合结束，开启计时器，此时已经结束的玩家监听器开放*/
	/*2.计时器：倒计时20s，用于玩家操作*/

	/*3.玩家监听器开放*/
	/*3.1.开启场下hero放置到场上的权限*/

	/*3.2.开启装备可装配到英雄的权限*/

	/*4.商店随机刷新出5个新的hero（这个要随玩家等级提高改变刷新概率）*/

	/*5.计时器结束，重新开始匹配*/
	/*5.1.关闭第3点中的权限*/

}
void GameWorkFlow::match()//游戏匹配
{
	/*匹配逻辑：两两匹配，选其中一人进入另一人的地图*/
	/*偶数个玩家则无事*/
	/*奇数个玩家选择将最后剩下一人，这个玩家A随机再找另一位存活玩家B匹配，输赢只影响玩家A，不影响玩家B的胜负*/
}

void GameWorkFlow::battle()//回合战斗
{
	/*1.暂停状态解除（指hero暂停），其他时刻均暂停，hero不可自动移动*/

	/*2.战斗*/

	/*3.当某一方的场上存活hero数量为0时，回合结束*/
}

void GameWorkFlow::roundEnd()//回合结束的结算
{
	/*1.败方*/
	/*1.1.败方Player扣20点血*/

	/*1.2.判断败方是否出局（血量低于0），更新该玩家状态为dead，更新存活玩家数*/
	/*1.2.1.AI死亡，无事*/

	/*1.2.2.单人人类玩家死亡，提示是否结束*/

	/*1.2.3.双人联机，只有一个死亡游戏继续*/

	/*1.3.败方金币增加10*/

	/*2.胜者*/
	/*2.1.胜者金币增加20*/

	/*2.判定游戏是否结束：仅剩一个玩家存活*/
	/*未结束：继续；已结束：退出这层循环*/

	/*3.回归自身场景*/

	/*3.1.胜者场上刷俩装备，败方刷一件*/

	/*4.场上hero状态刷新，血量回满，蓝量归零*/

}

void GameWorkFlow::draft()//选秀
{
	/*1.偶数回合回合结束后进入选秀*/

	/*2.随机刷出可以飘动的8件装备*/

	/*3.由血量低到高依次让Player去选择装备，每个player8s时间，选不上了不管他*/

	/*4.返回自身场景*/
}

void GameWorkFlow::GameEnd()//整局游戏结束的结算
{
	/*呈现结算画面*/

}

void GameWorkFlow::total()//整体流程
{
	
	while (true)
	{
		Menu();

		gameInit();

		while (true)
		{
			interval();

			if (huiheNum % 2 == 0) {

				draft();

			}

			match();

			battle();

			roundEnd();
			
		}

		GameEnd();

	}

}
